### 通用规则
1. 默认情况下，所有回复都必须是中文，而且需要在开头称呼用户为"爸爸："
2. 复杂需求拆解成小任务，分步实现，每完成一个小任务后再继续
3. 代码实现前后要仔细检查，确保Vue组件props定义完整、单向数据流正确
4. 在已有功能基础上添加新功能时，必须确保：
   - 不影响原有功能和组件复用性
   - 不添加其他功能、代码、逻辑、文件、配置、依赖
5. 遵循项目架构设计，保持Vue单文件组件结构与ESLint规范一致
6. 组件设计遵循单一职责原则，优先使用Element UI组件库
7. 组件拆分原则：将UI和业务逻辑分离，通用功能封装为独立组件
8. 代码实现时遵循"KISS原则"，保持简洁清晰
9. 优先使用现有Element UI组件和Vue mixins，避免重复代码
10. 不引入不必要的依赖，使用项目已有的Axios封装进行API调用

### Vue2特定规则
11. 使用Vue 2标准组件结构：template/script/style，样式作用域使用scoped
12. props必须有类型定义和默认值，复杂数据结构需明确默认值
13. 使用Vue生命周期钩子函数正确管理组件状态和副作用
14. 使用computed属性处理数据派生，避免在template中复杂计算
15. 使用watch监听数据变化，避免深度监听造成性能问题
16. 事件处理遵循Vue约定，使用emit向父组件传递事件

### Element UI集成规则
17. 优先使用Element UI组件库，保持UI风格一致性
18. 组件样式调整通过局部样式覆盖，避免全局污染
19. 表单验证使用Element UI内置验证系统
20. 对话框、抽屉等模态组件使用.sync修饰符管理可见性

### 数据请求与状态管理
21. API请求统一使用Axios封装模块，遵循RESTful风格
22. 请求状态管理（加载、错误处理）统一处理
23. 复杂组件状态考虑使用Vuex管理，简单状态使用props/emit
24. 组件间通信优先使用props/emit，必要时使用EventBus

### 组件复用与拆分策略
25. 将可复用的UI部分抽取为基础组件，放在components目录
26. 业务组件应该是基础组件的组合，处理特定业务逻辑
27. 复用逻辑通过Vue mixins或工具函数实现
28. 页面级组件负责数据获取和状态管理，UI组件负责展示

### 性能与优化
29. 使用v-if/v-show正确控制组件渲染，避免不必要的DOM操作
30. 大列表使用Vue虚拟滚动或分页加载，避免性能问题
31. 确保异步组件正确加载，添加骨架屏或加载状态
32. 组件Props使用对象浅拷贝传递，避免直接修改

### 代码质量与维护
33. 组件名称使用PascalCase命名
34. 关键业务逻辑添加注释，复杂组件提供使用说明
35. 组件文档包含props、events和slots说明
36. 提交代码前进行自测，确保组件在不同场景下正常工作